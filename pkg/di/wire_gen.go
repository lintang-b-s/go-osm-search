// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	context2 "context"
	"github.com/google/wire"
	"github.com/lintang-b-s/osm-search/pkg/di/config"
	"github.com/lintang-b-s/osm-search/pkg/di/context"
	"github.com/lintang-b-s/osm-search/pkg/di/geofence"
	"github.com/lintang-b-s/osm-search/pkg/di/kv"
	"github.com/lintang-b-s/osm-search/pkg/di/logger"
	"github.com/lintang-b-s/osm-search/pkg/di/searcher"
	"github.com/lintang-b-s/osm-search/pkg/http"
	"github.com/lintang-b-s/osm-search/pkg/http/http-router/controllers"
	"github.com/lintang-b-s/osm-search/pkg/http/usecases"
	"github.com/lintang-b-s/osm-search/pkg/searcher"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeSearcherService(scoring searcher.SimiliarityScoring, useRateLimit bool) (*http.Server, func(), error) {
	contextContext, cleanup, err := context.New()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := logger_di.New()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	kvdb, err := kv_di.New(contextContext)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	usecasesSearcher, err := searcher_di.New(contextContext, kvdb, scoring)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	searchService := NewSearcherService(logger, usecasesSearcher)
	geofenceIndex := geofence_di.New(kvdb)
	geofenceService := NewGeofenceService(geofenceIndex)
	server, err := NewSearchAPIServer(contextContext, logger, searchService, geofenceService, useRateLimit)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return server, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var defaultSet = wire.NewSet(context.New, config.New, logger_di.New, kv_di.New, searcher_di.New, geofence_di.New)

var searcherSet = wire.NewSet(
	defaultSet,
	NewSearcherService,
	NewGeofenceService,
	NewSearchAPIServer,
)

func NewSearcherService(log *zap.Logger, searcher2 usecases.Searcher) controllers.SearchService {
	return usecases.New(log, searcher2)
}

func NewGeofenceService(geofenceIndex usecases.GeofenceIndex) controllers.GeofenceService {
	return usecases.NewGeofenceService(geofenceIndex)
}

func NewSearchAPIServer(ctx context2.Context, log *zap.Logger,
	searchService controllers.SearchService, geofenceService controllers.GeofenceService, 
	useRateLimit	bool) (*http.Server, error) {
	api := http.NewServer(log)

	apiService, err := api.Use(
		ctx, log, searchService, geofenceService,useRateLimit,
	)
	if err != nil {
		return nil, err
	}

	return apiService, nil
}
